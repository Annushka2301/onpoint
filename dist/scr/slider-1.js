"use strict";

var slider = document.querySelector('.slider'),
    sliderList = slider.querySelector('.slider__list'),
    sliderTrack = slider.querySelector('.slider__track'),
    slides = slider.querySelectorAll('.slider__slide'),
    home = document.querySelector('.header__btn'),
    next = slider.querySelector('.slide-1__btn'),
    slideWidth = slides[0].offsetWidth,
    slideIndex = 0,
    posInit = 0,
    posX1 = 0,
    posX2 = 0,
    posY1 = 0,
    posY2 = 0,
    posFinal = 0,
    isSwipe = false,
    isScroll = false,
    allowSwipe = true,
    transition = true,
    nextTrf = 0,
    prevTrf = 0,
    lastTrf = --slides.length * slideWidth,
    posThreshold = slides[0].offsetWidth * 0.35,
    trfRegExp = /([-0-9.]+(?=px))/,
    swipeStartTime,
    swipeEndTime,
    animation = document.querySelectorAll('.slide-2__img');
modal = document.querySelector('.modal');
getEvent = function getEvent() {
  return event.type.search('touch') !== -1 ? event.touches[0] : event;
}, slide = function slide() {
  if (transition) {
    sliderTrack.style.transition = 'transform .5s';
  }

  sliderTrack.style.transform = "translate3d(-".concat(slideIndex * slideWidth, "px, 0px, 0px)");

  if (slideIndex === 1) {
    for (var i = 0; i < animation.length; i++) {
      animation[i].classList.add('appear');
    }

    ;
  } else {
    for (var _i = 0; _i < animation.length; _i++) {
      animation[_i].classList.remove('appear');
    }

    ;
  }

  if (slideIndex !== 2) modal.style = 'display: none'; // prev.classList.toggle('disabled', slideIndex === 0);
  // next.classList.toggle('disabled', slideIndex === --slides.length);
}, swipeStart = function swipeStart() {
  var evt = getEvent();

  if (allowSwipe) {
    swipeStartTime = Date.now();
    transition = true;
    nextTrf = (slideIndex + 1) * -slideWidth;
    prevTrf = (slideIndex - 1) * -slideWidth;
    posInit = posX1 = evt.clientX;
    posY1 = evt.clientY;
    sliderTrack.style.transition = '';
    document.addEventListener('touchmove', swipeAction);
    document.addEventListener('mousemove', swipeAction);
    document.addEventListener('touchend', swipeEnd);
    document.addEventListener('mouseup', swipeEnd);
    sliderList.classList.remove('grab');
    sliderList.classList.add('grabbing');
  }
}, swipeAction = function swipeAction() {
  var evt = getEvent(),
      style = sliderTrack.style.transform,
      transform = +style.match(trfRegExp)[0];
  posX2 = posX1 - evt.clientX;
  posX1 = evt.clientX;
  posY2 = posY1 - evt.clientY;
  posY1 = evt.clientY;

  if (!isSwipe && !isScroll) {
    var posY = Math.abs(posY2);

    if (posY > 7 || posX2 === 0) {
      isScroll = true;
      allowSwipe = false;
    } else if (posY < 7) {
      isSwipe = true;
    }
  }

  if (isSwipe) {
    if (slideIndex === 0) {
      if (posInit < posX1) {
        setTransform(transform, 0);
        return;
      } else {
        allowSwipe = true;
      }
    }

    if (slideIndex === --slides.length) {
      if (posInit > posX1) {
        setTransform(transform, lastTrf);
        return;
      } else {
        allowSwipe = true;
      }
    }

    if (posInit > posX1 && transform < nextTrf || posInit < posX1 && transform > prevTrf) {
      reachEdge();
      return;
    }

    sliderTrack.style.transform = "translate3d(".concat(transform - posX2, "px, 0px, 0px)");
  }
}, swipeEnd = function (_swipeEnd) {
  function swipeEnd() {
    return _swipeEnd.apply(this, arguments);
  }

  swipeEnd.toString = function () {
    return _swipeEnd.toString();
  };

  return swipeEnd;
}(function () {
  posFinal = posInit - posX1;
  isScroll = false;
  isSwipe = false;
  document.removeEventListener('touchmove', swipeAction);
  document.removeEventListener('mousemove', swipeAction);
  document.removeEventListener('touchend', swipeEnd);
  document.removeEventListener('mouseup', swipeEnd);
  sliderList.classList.add('grab');
  sliderList.classList.remove('grabbing');

  if (allowSwipe) {
    swipeEndTime = Date.now();

    if (Math.abs(posFinal) > posThreshold || swipeEndTime - swipeStartTime < 300) {
      if (posInit < posX1) {
        slideIndex--;
      } else if (posInit > posX1) {
        slideIndex++;
      }
    } // if (slideIndex === 1)


    if (posInit !== posX1) {
      allowSwipe = false;
      slide();
    } else {
      allowSwipe = true;
    }
  } else {
    allowSwipe = true;
  }
}), setTransform = function setTransform(transform, comapreTransform) {
  if (transform >= comapreTransform) {
    if (transform > comapreTransform) {
      sliderTrack.style.transform = "translate3d(".concat(comapreTransform, "px, 0px, 0px)");
    }
  }

  allowSwipe = false;
}, reachEdge = function reachEdge() {
  transition = false;
  swipeEnd();
  allowSwipe = true;
};
sliderTrack.style.transform = 'translate3d(0px, 0px, 0px)';
sliderList.classList.add('grab');
sliderTrack.addEventListener('transitionend', function () {
  return allowSwipe = true;
});
slider.addEventListener('touchstart', swipeStart);
slider.addEventListener('mousedown', swipeStart);
home.addEventListener('click', function () {
  slideIndex = 0;
  slide();
});
next.addEventListener('click', function () {
  slideIndex = 1;
  slide();
}); // arrows.addEventListener('click', function() {
//   let target = event.target;
//   if (target.classList.contains('next')) {
//     slideIndex++;
//   } else if (target.classList.contains('prev')) {
//     slideIndex--;
//   } else {
//     return;
//   }
//   slide();
// });
// if (slideIndex === 1) {
//   console.log(slideIndex)
//   for (let i = 0; i < animation.length; i++) {
//     animation[i].classList.add('.appear');
//   };
// } else {
//   console.log(slideIndex)
//   for (let i = 0; i < animation.length; i++) {
//     animation[i].classList.remove('.appear');
//   };
// }
//# sourceMappingURL=data:application/json;charset=utf8;base64,
